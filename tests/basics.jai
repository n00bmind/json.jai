
test_empty_object :: ()
{
    payload: string = "{}";
    value: *json_value_s = json_parse( payload.data, xx payload.count );

    Assert( value != null );
    Assert( value.payload != null );
    Assert( .json_type_object == value.type );

    object := cast(*json_object_s)value.payload;

    Assert( object.start == null );
    Assert( object.length == 0 );

    free( value );
} @test


test_object_string :: ()
{
    payload := "{\"foo\" : \"Heyo, gaia?\"}";
    value := json_parse( payload.data, xx payload.count );

    Assert( value );
    Assert( value.payload != null );
    Assert( .json_type_object == value.type );

    object := cast(*json_object_s)value.payload;

    Assert( object.start != null );
    Assert( 1 == object.length );

    Assert( object.start.name != null );
    Assert( object.start.value != null );
    Assert( object.start.next == null ); // we have only one element

    Assert( object.start.name.str != null );
    Assert( streq( "foo", object.start.name.str ) );
    Assert( "foo".count == object.start.name.string_size );
    Assert( strlen( object.start.name.str ) == object.start.name.string_size );

    value2 := object.start.value;

    Assert( value2.payload != null );
    Assert( .json_type_string == value2.type );

    str := cast(*json_string_s)value2.payload;

    Assert( str.str != null );
    Assert( streq( "Heyo, gaia?", str.str ) );
    Assert( strlen( "Heyo, gaia?" ) == str.string_size );
    Assert( strlen( str.str ) == str.string_size );

    free( value );
} @test

test_object_number :: ()
{
    payload := "{\"foo\" : -0.123e-42}";
    value: *json_value_s = json_parse( payload );

    Assert( value );
    Assert( value.payload );
    AssertEqual( .json_type_object, value.type );

    object := cast(*json_object_s)value.payload;

    Assert( object.start );
    AssertEqual( 1, object.length );

    Assert( object.start.name );
    Assert( object.start.value );
    AssertFalse( object.start.next ); // we have only one element

    Assert( object.start.name.str );
    Assert( streq( "foo", object.start.name.str ) );
    AssertEqual( strlen("foo"), object.start.name.string_size );
    AssertEqual( strlen( object.start.name.str ), object.start.name.string_size );

    value2 := object.start.value;

    Assert( value2.payload );
    AssertEqual( .json_type_number, value2.type );

    number := cast(*json_number_s)value2.payload;

    Assert( number.number );
    Assert( streq( "-0.123e-42", number.number ) );
    AssertEqual( strlen("-0.123e-42"), number.number_size );
    AssertEqual( strlen(number.number), number.number_size );

    free( value );
} @test

test_object_object :: ()
{
    payload := "{\"foo\" : {}}";
    value: *json_value_s = json_parse( payload );

    Assert( value );
    Assert( value.payload );
    AssertEqual( .json_type_object, value.type );

    object := cast(*json_object_s)value.payload;

    Assert( object.start );
    AssertEqual( 1, object.length );

    Assert( object.start.name );
    Assert( object.start.value );
    AssertFalse( object.start.next ); // we have only one element

    Assert( object.start.name.str );
    Assert( streq( "foo", object.start.name.str ) );
    AssertEqual( strlen("foo"), object.start.name.string_size );
    AssertEqual( strlen( object.start.name.str ), object.start.name.string_size );

    value2 := object.start.value;

    Assert( value2.payload );
    AssertEqual( .json_type_object, value2.type );

    object2 := cast(*json_object_s)value2.payload;

    AssertFalse( object2.start );
    AssertEqual( 0, object2.length );

    free( value );
} @test

test_object_array :: ()
{
    payload := "{\"foo\" : []}";
    value: *json_value_s = json_parse( payload );

    Assert( value );
    Assert( value.payload );
    AssertEqual( .json_type_object, value.type );

    object := cast(*json_object_s)value.payload;

    Assert( object.start );
    AssertEqual( 1, object.length );

    Assert( object.start.name );
    Assert( object.start.value );
    AssertFalse( object.start.next ); // we have only one element

    Assert( object.start.name.str );
    Assert( streq( "foo", object.start.name.str ) );
    AssertEqual( strlen("foo"), object.start.name.string_size );
    AssertEqual( strlen( object.start.name.str ), object.start.name.string_size );

    value2 := object.start.value;

    Assert( value2.payload );
    AssertEqual( .json_type_array, value2.type );

    array := cast(*json_array_s)value2.payload;

    AssertFalse( array.start );
    AssertEqual( 0, array.length );

    free( value );
} @test

test_object_true :: ()
{
    payload := "{\"foo\" : true}";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_object, value.type);

    object := cast(*json_object_s)value.payload;

    Assert(object.start);
    AssertEqual(1, object.length);

    Assert(object.start.name);
    Assert(object.start.value);
    AssertFalse(object.start.next); // we have only one element

    Assert(object.start.name.str);
    Assert(streq("foo", object.start.name.str));
    AssertEqual(strlen("foo"), object.start.name.string_size);
    AssertEqual(strlen(object.start.name.str), object.start.name.string_size);

    value2 := object.start.value;

    AssertFalse(value2.payload);
    AssertEqual(.json_type_true, value2.type);

    free(value);
} @test

test_object_false :: ()
{
    payload := "{\"foo\" : false}";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_object, value.type);

    object := cast(*json_object_s)value.payload;

    Assert(object.start);
    AssertEqual(1, object.length);

    Assert(object.start.name);
    Assert(object.start.value);
    AssertFalse(object.start.next); // we have only one element

    Assert(object.start.name.str);
    Assert(streq("foo", object.start.name.str));
    AssertEqual(strlen("foo"), object.start.name.string_size);
    AssertEqual(strlen(object.start.name.str), object.start.name.string_size);

    value2 := object.start.value;

    AssertFalse(value2.payload);
    AssertEqual(.json_type_false, value2.type);

    free(value);
} @test

test_object_null :: ()
{
    payload := "{\"foo\" : null}";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_object, value.type);

    object := cast(*json_object_s)value.payload;

    Assert(object.start);
    AssertEqual(1, object.length);

    Assert(object.start.name);
    Assert(object.start.value);
    AssertFalse(object.start.next); // we have only one element

    Assert(object.start.name.str);
    Assert(streq("foo", object.start.name.str));
    AssertEqual(strlen("foo"), object.start.name.string_size);
    AssertEqual(strlen(object.start.name.str), object.start.name.string_size);

    value2 := object.start.value;

    AssertFalse(value2.payload);
    AssertEqual(.json_type_null, value2.type);

    free(value);
} @test

test_array_empty :: ()
{
    payload := "[]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    AssertFalse(array.start);
    AssertEqual(0, array.length);

    free(value);
} @test

test_array_string :: ()
{
    payload := "[\"Heyo, gaia?\"]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    AssertFalse(array.start.next); // we have only one element

    value2 := array.start.value;

    Assert(value2.payload);
    AssertEqual(.json_type_string, value2.type);

    str := cast(*json_string_s)value2.payload;

    Assert(str.str);
    Assert(streq("Heyo, gaia?", str.str));
    AssertEqual(strlen("Heyo, gaia?"), str.string_size);
    AssertEqual(strlen(str.str), str.string_size);

    free(value);
} @test

test_array_number :: ()
{
    payload := "[-0.123e-42]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    AssertFalse(array.start.next); // we have only one element

    value2 := array.start.value;

    Assert(value2.payload);
    AssertEqual(.json_type_number, value2.type);

    number := cast(*json_number_s)value2.payload;

    Assert(number.number);
    Assert(streq("-0.123e-42", number.number));
    AssertEqual(strlen("-0.123e-42"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_array_true :: ()
{
    payload := "[true]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    AssertFalse(array.start.next); // we have only one element

    value2 := array.start.value;

    AssertFalse(value2.payload);
    AssertEqual(.json_type_true, value2.type);

    free(value);
} @test

test_array_false :: ()
{
    payload := "[false]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    AssertFalse(array.start.next); // we have only one element

    value2 := array.start.value;

    AssertFalse(value2.payload);
    AssertEqual(.json_type_false, value2.type);

    free(value);
} @test

test_array_null :: ()
{
    payload := "[null]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    AssertFalse(array.start.next); // we have only one element

    value2 := array.start.value;

    AssertFalse(value2.payload);
    AssertEqual(.json_type_null, value2.type);

    free(value);
} @test

test_empty_document :: ()
{
    payload := "";
    value := json_parse(payload);
    AssertFalse(value);
} @test



test_number_zero :: ()
{
    payload := "[0]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("0", number.number));
    AssertEqual(strlen("0"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_positive :: ()
{
    payload := "[42]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("42", number.number));
    AssertEqual(strlen("42"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_minus :: ()
{
    payload := "[-0]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("-0", number.number));
    AssertEqual(strlen("-0"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_decimal :: ()
{
    payload := "[0.4]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("0.4", number.number));
    AssertEqual(strlen("0.4"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_smalle :: ()
{
    payload := "[1e4]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("1e4", number.number));
    AssertEqual(strlen("1e4"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_bige :: ()
{
    payload := "[1E4]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("1E4", number.number));
    AssertEqual(strlen("1E4"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_eplus :: ()
{
    payload := "[1e+4]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("1e+4", number.number));
    AssertEqual(strlen("1e+4"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_number_eminus :: ()
{
    payload := "[1e-4]";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_number, array.start.value.type);

    number := cast(*json_number_s)array.start.value.payload;

    Assert(number.number);

    Assert(streq("1e-4", number.number));
    AssertEqual(strlen("1e-4"), number.number_size);
    AssertEqual(strlen(number.number), number.number_size);

    free(value);
} @test

test_object_missing_closing_bracket :: ()
{
    payload := "{\n  \"dps\":[1, 2, {\"a\" : true]\n}";

    result: json_parse_result_s;
    value := json_parse_ex(payload.data, xx payload.count, 0, null, null, *result);

    AssertFalse(value);

    AssertEqual(.json_parse_error_expected_comma_or_closing_bracket, result.error);
    AssertEqual(28, result.error_offset);
    AssertEqual(2, result.error_line_no);
    AssertEqual(27, result.error_row_no);
} @test

test_array_missing_closing_bracket :: ()
{
    payload := "{\n  \"dps\":[1, 2, 3\n}";

    result: json_parse_result_s;
    value := json_parse_ex(payload.data, xx payload.count, 0, null, null, *result);

    AssertFalse(value);

    AssertEqual(.json_parse_error_expected_comma_or_closing_bracket, result.error);
    AssertEqual(19, result.error_offset);
    AssertEqual(3, result.error_line_no);
    AssertEqual(1, result.error_row_no);
} @test

test_object_empty_strings :: ()
{
    payload := "{\"foo\": \"\", \"bar\": \"\"}";
    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_object, value.type);

    object := cast(*json_object_s)value.payload;

    AssertEqual(2, object.length);

    el1 := object.start;
    Assert(el1);
    el2 := el1.next;
    Assert(el2);

    AssertFalse(el2.next); // we have only one element

    Assert(el1.name);
    Assert(el1.name.str);
    Assert(streq("foo", el1.name.str));
    AssertEqual(strlen("foo"), el1.name.string_size);
    AssertEqual(strlen(el1.name.str), el1.name.string_size);

    Assert(el1.value);
    AssertEqual(.json_type_string, el1.value.type);
    s1 := cast(*json_string_s)el1.value.payload;
    Assert(s1);
    Assert(s1.str);
    Assert(streq("", s1.str));
    AssertEqual(strlen(""), s1.string_size);
    AssertEqual(strlen(s1.str), s1.string_size);

    Assert(el2.name);
    Assert(el2.name.str);
    Assert(streq("bar", el2.name.str));
    AssertEqual(strlen("bar"), el2.name.string_size);
    AssertEqual(strlen(el2.name.str), el2.name.string_size);

    Assert(el2.value);
    AssertEqual(.json_type_string, el2.value.type);
    s2 := cast(*json_string_s)el2.value.payload;
    Assert(s2);
    Assert(s2.str);
    Assert(streq("", s2.str));
    AssertEqual(strlen(""), s2.string_size);
    AssertEqual(strlen(s2.str), s2.string_size);

    free(value);
} @test



test_string_unicode_escape :: ()
{
    expected_str :=
        "\xEA\x83\x8AABC\xC3\x8ADEF\n ,\xC5\xBD,\xE0\xA0\x80,\xE0\xA6\xA8,\xE2\x99\x9E,\xEF\xBF\xBD,\xD0\xA8,\xE4\x93\x8D,\xF0\x90\x80\x80,\xF0\x9F\x98\x83.";

    payload :=
        "[\"\\Ua0caABC\\U00caDEF\\u000a\\u0020,\\u017D,\\u0800,\\u09A8,\\u265E,\\uFFFD,\\u0428,\\u44CD,\\uD800\\uDC00,\\uD83D\\uDE03.\"]";

    value := json_parse(payload);

    Assert(value);
    Assert(value.payload);
    AssertEqual(.json_type_array, value.type);

    array := cast(*json_array_s)value.payload;

    Assert(array.start);
    AssertEqual(1, array.length);

    Assert(array.start.value);
    Assert(array.start.value.payload);
    AssertEqual(.json_type_string, array.start.value.type);

    str := cast(*json_string_s)array.start.value.payload;

    Assert(str.str);

    Assert(streq(expected_str, str.str));
    AssertEqual(expected_str.count, xx str.string_size);
    AssertEqual(strlen(str.str), str.string_size);

    free(value);
} @test

test_helpers_all :: ()
{
    payload := "{\"foo\" : [ null, true, false, \"bar\", 42 ]}";
    root := json_parse(payload);

    object := json_value_as_object(root);
    Assert(object);
    AssertEqual(object.length, 1);

    object_element := object.start;
    Assert(object_element);
    Assert(streq("foo", object_element.name.str));
    AssertFalse(object_element.next);

    array := json_value_as_array(object_element.value);
    Assert(array);
    AssertEqual(array.length, 5);

    // null
    array_element := array.start;
    Assert(array_element);
    Assert(json_value_is_null(array_element.value));

    // true
    array_element = array_element.next;
    Assert(array_element);
    Assert(json_value_is_true(array_element.value));

    // false
    array_element = array_element.next;
    Assert(array_element);
    Assert(json_value_is_false(array_element.value));

    // string
    array_element = array_element.next;
    Assert(array_element);

    str := json_value_as_string(array_element.value);
    Assert(str);
    Assert(streq("bar", str.str));

    // number
    array_element = array_element.next;
    Assert(array_element);

    number := json_value_as_number(array_element.value);
    Assert(number);
    Assert(streq("42", number.number));

    AssertFalse(array_element.next);

    free(root);
} @test

test_random_overflow :: ()
{
    payload := "\n\t\t\n\t\t\t\t\"\x00";
    root := json_parse(payload);
    AssertFalse(root);
} @test

test_random_whitespace_overrun :: ()
{
    payload := u8.[ #char "1", #char "e" ];
    root := json_parse(payload.data, 2);
    AssertFalse(root);
} @test

test_random_number_overrun :: ()
{
    payload := u8.[ #char "0", #char "." ];
    root := json_parse(payload.data, 2);
    AssertFalse(root);
} @test

test_random_skip_c_style_overrun :: ()
{
    payload := u8.[ #char "4", #char "e" ];
    root := json_parse_ex(payload.data, 2, .json_parse_flags_allow_json5, null, null, null);
    AssertFalse(root);
} @test

test_random_infinity_overrun :: ()
{
    payload := u8.[ #char "[", #char "I", #char "n", #char "f", #char "i", #char "n", #char "i", #char "t", #char "y", #char "0", #char "]" ];
    root := json_parse_ex(payload.data, 11, .json_parse_flags_allow_inf_and_nan, null, null, null);
    AssertFalse(root);
} @test

test_random_nan_overrun :: ()
{
    payload := u8.[ #char "[", #char "N", #char "a", #char "N", #char "0", #char "]" ];
    root := json_parse_ex(payload.data, 11, .json_parse_flags_allow_inf_and_nan, null, null, null);
    AssertFalse(root);
} @test

test_random_array_overrun :: ()
{
    payload := u8.[ #char "{", #char "\"", #char "k", #char "\"", #char " ", #char ":", #char " ", #char "t", #char "r", #char "u",
        #char "e", #char "/", #char " ", #char "\"", #char "b", #char "\"", #char " ", #char ":", #char " ", #char "[",
        #char "f", #char "a", #char "l", #char "s", #char "e", #char ",", #char " ", #char "n", #char "u", #char "l",
        #char "l", #char ",", #char " ", #char "\"", #char "f", #char "o", #char "o", #char "\"", #char "]", #char "}" ];
    root := json_parse_ex(payload.data, 40, 0x2ffff, null, null, null);
    AssertFalse(root);
} @test



test_random_github_92 ::()
{
    payload := u8.[ 0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x27, 0x5b,
                    0x2f, 0x2a, 0x2a, 0x31, 0x31, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6,
                    0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0x6f, 0x01, 0x65, 0x22, 0x3a, 0x31 ];
    root := json_parse_ex(payload.data, 0x23, xx 0x5fd6d7d6d6247bff, null, null, null );
    AssertFalse(root);
} @test

test_random_github_93 :: ()
{
    payload := u8.[
        0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x0e, 0x27,
        0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27,
        0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27,
        0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x5b,
        0x2c, 0x2f, 0x2a, 0x2a, 0x31, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6,
        0xd6, 0xd6, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27,
        0x27, 0x27, 0x27, 0x27, 0x27, 0x6f, 0x01, 0x61, 0x22, 0x3a, 0x31, 0x20 ];
    root := json_parse_ex(payload.data, 0x54, xx 0x5fd628d6d6247bff, null, null, null );
    AssertFalse(root);
} @test

test_random_github_94 :: ()
{
    payload := u8.[
      0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x0e, 0x5b,
      0x2f, 0x2f, 0x2a, 0x31, 0x31, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6,
      0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0x6f, 0x01, 0x65, 0x22, 0x3a, 0x31 ];
    root := json_parse_ex(payload.data, 0x23, xx 0x5fd6d7d6d6247b16, null, null, null );
    AssertFalse(root);
} @test

test_random_github_95 :: ()
{
    payload := u8.[
      0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x2c, 0x5b,
      0x31, 0x2c, 0x20, 0x30, 0x2c, 0x5b, 0x31, 0x2c, 0x5b, 0x31, 0x2c, 0x20,
      0x30, 0x2c, 0x31, 0x2c, 0x20, 0x5b, 0x31, 0x2c, 0x5b, 0x31, 0x2c, 0x20,
      0x30, 0x2c, 0x5b, 0x31, 0x2c, 0x5b, 0x31, 0x2c, 0x20, 0x30, 0x2c, 0x31,
      0x2c, 0x20, 0x31, 0x2c, 0x5b, 0x31, 0x2c, 0x20, 0x30, 0x2c, 0x31, 0x2c,
      0x20, 0x30, 0x2c, 0x31, 0x2c, 0x5b, 0x31, 0x2c, 0x20, 0x30, 0x2c, 0x5b,
      0x31, 0x0e, 0x5b, 0x7b, 0x2a, 0x2a, 0x31, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6,
      0xd6, 0xd6, 0xd6, 0xd6, 0x6f, 0x01, 0x65, 0x22, 0x3a, 0x31, 0x20 ];
    root := json_parse_ex(payload.data, 0x5f, xx 0x5fd6d79cd6247bff, null, null, null );
    AssertFalse(root);
} @test

test_random_github_96 :: ()
{
    {
        payload := u8.[
            0x5f, 0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x0e,
            0x5b, 0x7b, 0x2a, 0x2a, 0x31, 0xd6, 0xd6, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x78, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0xff, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0xd6,
            0x54, 0x61, 0x67, 0x73, 0xff, 0xff, 0x7f, 0xff, 0x65, 0x22, 0x3a, 0x20,
            0x32, 0x30, 0x30, 0x2c, 0x0a, 0x20 ];
        root := json_parse_ex(payload.data, 0x14a, xx 0xd6d7d6d6247bff1f, null, null, null );
        AssertFalse(root);
    }

    {
        payload := u8.[
            0x5f, 0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x0e,
            0x5b, 0x7b, 0x2a, 0x2a, 0x31, 0xd6, 0xd6, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0xff, 0x7b, 0x7b,
            0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x2c,
            0x0a, 0x20, 0x20, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x59, 0x45,
            0x45, 0x45, 0x45, 0x7b, 0x7b, 0x7b, 0x7b, 0x7f, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x5b, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58,
            0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30,
            0x58, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c,
            0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x2c, 0x0a,
            0x20, 0x20, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7f, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x70, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b, 0x76, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x69, 0x64, 0x81, 0x0b, 0x70, 0x3a, 0x30, 0x58, 0x31, 0x65, 0x31, 0x65,
            0x65, 0x65, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x03, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x80, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x5b, 0x20, 0x5b, 0x30, 0x2c,
            0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58,
            0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a,
            0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x20, 0x30, 0x58, 0x2c, 0x30,
            0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20,
            0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x02, 0x20, 0x20, 0x30, 0x58, 0x2c,
            0x30, 0x58, 0x2c, 0x0a, 0x2c, 0x0a, 0x20, 0x20, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7f, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x5b, 0x20, 0x5b, 0x30, 0x2c, 0x20,
            0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c,
            0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20,
            0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58,
            0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30,
            0x58, 0x2c, 0x0a, 0x2c, 0x0a, 0x20, 0x20, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7f, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x73, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x77,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x03, 0x7b, 0x7b, 0x7b, 0x7b, 0x83, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x80, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x5b, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c,
            0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c,
            0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58,
            0x2c, 0x30, 0x58, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c,
            0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30,
            0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a,
            0x2c, 0x0a, 0x20, 0x20, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7f, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x74, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x71, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x27, 0x4f, 0x01,
            0x5b, 0x27, 0x27, 0x27, 0x1d, 0x4f, 0x01, 0x27, 0x27, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x5b, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58,
            0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30,
            0x58, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c,
            0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x2c, 0x0a,
            0x20, 0x20, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x5b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x74, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x94, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x27, 0x4f, 0x01, 0x5b,
            0x27, 0x27, 0x27, 0x1d, 0x4f, 0x01, 0x27, 0x27, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x5b, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c,
            0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58,
            0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58,
            0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58,
            0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a,
            0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x2c, 0x0a, 0x20,
            0x20, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x76, 0x7b, 0x90,
            0x74, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x71, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x27, 0x4f, 0x01, 0x5b, 0x27, 0x27, 0x27,
            0x1d, 0x4f, 0x01, 0x27, 0x27, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x6a, 0x7b, 0x5b, 0x20, 0x5b,
            0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20,
            0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58,
            0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x20, 0x30, 0x58,
            0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58,
            0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x2c, 0x0a, 0x20, 0x20, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x74,
            0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x27, 0x4f, 0x01, 0x5b, 0x27, 0x27, 0x27, 0x1d,
            0x4f, 0x01, 0x27, 0x27, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x5b, 0x20, 0x5b, 0x30,
            0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30,
            0x58, 0x2c, 0x30, 0x58, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c,
            0x0a, 0x20, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x20, 0x30, 0x58, 0x2c,
            0x30, 0x58, 0x2c, 0x30, 0x2c, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c,
            0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x20, 0x20, 0x30, 0x58,
            0x2c, 0x30, 0x58, 0x2c, 0x0a, 0x2c, 0x0a, 0x20, 0x20, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7f, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x0d, 0x0d, 0x0d, 0xfd, 0x0a, 0x0d,
            0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x78, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x20, 0x30, 0x58, 0x2c, 0x30, 0x58, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x0d,
            0x0d, 0x0d, 0x0d, 0x0b, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d,
            0x0d, 0x0d, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x78,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0xd6, 0x54, 0x61,
            0x67, 0x73, 0xff, 0xff, 0x7f, 0xff, 0x65, 0x22, 0x3a, 0x20, 0x32, 0x30,
            0x30, 0x2c, 0x0a, 0x20 ];
        root := json_parse_ex(payload.data, 0xb20, xx 0xd6d7d6d6247bff7f, null, null, null );
        AssertFalse(root);
    }
} @test

test_random_github_97 :: ()
{
    payload := u8.[
      0x6c, 0x3a, 0x4e, 0x61, 0x4e, 0x45, 0x38, 0x0d, 0x0d, 0x22, 0x0e, 0x5b,
      0x7b, 0x2a, 0x2a, 0x31, 0xd6, 0xd6, 0xd6, 0x54, 0x61, 0x67, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x27, 0x31, 0x31, 0x31,
      0x27, 0x5c, 0x75, 0x31, 0x32, 0x31, 0x31, 0x48, 0x1d, 0x31, 0x32, 0x31,
      0x31, 0x31, 0x31, 0x27, 0x5c, 0x75, 0x31, 0x32, 0x31, 0x31, 0x48, 0x1d,
      0x31, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x8d,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0xd5, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x98, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x3b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b,
      0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x73, 0xff, 0xff,
      0x7f, 0xff, 0x65, 0x22, 0x3a, 0x20, 0x32, 0x30, 0x30, 0x2c, 0x0a, 0x20,
      0x20 ];
    root := json_parse_ex(payload.data, 0x3b5, xx 0x5fd6d7d6d6247bdf, null, null, null );
    AssertFalse(root);
} @test


#scope_module

strlen :: ( s: *u8 ) -> u64
{
    return xx c_style_strlen( s );
}

streq :: ( a: string, b: *u8 ) -> bool
{
    if a.count != c_style_strlen( b )
        return false;

    for 0 .. a.count - 1
        if a[it] != b[it]
            return false;
    return true;
}

